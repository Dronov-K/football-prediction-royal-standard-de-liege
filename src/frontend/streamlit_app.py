import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import sys
import os
import pandas as pd
from styles.app_styles import AppStyle

# -------------------- Configuration de la page --------------------
st.set_page_config(
    page_title="JPL Prediction Pro",
    page_icon="‚öΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# -------------------- Load Data & Seasons --------------------
DATA_PATH = os.path.abspath(os.path.dirname(__file__) + '/../../data/raw/dataset_old_2.csv')
df_full = pd.read_csv(DATA_PATH)
# Extract available seasons (years from Date column)
df_full['Year'] = pd.to_datetime(df_full['Date'], errors='coerce').dt.year
# Format seasons as 'Saison YYYY-YYYY'
raw_years = sorted(df_full['Year'].dropna().unique(), reverse=True)
season_labels = [f"Saison {int(y)}-{int(y)+1}" for y in raw_years]
season_labels.insert(0, "Toutes saisons")

# Import des composants backend
sys.path.append(os.path.abspath(os.path.dirname(__file__) + "/../.."))
from utils.data_io import load_model
from src.backend.model.my_model import ModelTrainer

# -------------------- Styles CSS Personnalis√©s --------------------
st.markdown("""
<style>
    /* Global Styles */
    .main-header {
        background: linear-gradient(90deg, #FF6B6B, #4ECDC4);
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        margin-bottom: 30px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .main-header h1 {
        color: white;
        font-size: 2.5rem;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    .team-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        color: white;
        margin: 10px 0;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease;
    }
    
    .team-card:hover {
        transform: translateY(-5px);
    }
    
    .prediction-result {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        padding: 25px;
        border-radius: 20px;
        text-align: center;
        color: white;
        margin: 20px 0;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        border: 2px solid rgba(255, 255, 255, 0.1);
    }
    
    .stats-container {
        background: rgba(255, 255, 255, 0.05);
        padding: 20px;
        border-radius: 15px;
        margin: 15px 0;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .vs-divider {
        text-align: center;
        font-size: 3rem;
        font-weight: bold;
        color: #FF6B6B;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        margin: 20px 0;
    }
    
    .stSelectbox > div > div > div {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        color: white;
        margin: 5px;
    }
</style>
""", unsafe_allow_html=True)

# -------------------- Header Principal --------------------
st.markdown("""
<div class="main-header">
    <h1>‚öΩ Jupiler Pro League Prediction Pro</h1>
    <p style="margin: 10px 0 0 0; font-size: 1.2rem; opacity: 0.9;">
        Analyse avanc√©e et pr√©dictions intelligentes
    </p>
</div>
""", unsafe_allow_html=True)

# -------------------- Data Section --------------------
jupiler_teams = [
    "Anderlecht", "Club Brugge", "Standard", "Genk",
    "Gent", "Charleroi", "Cercle Brugge", "Antwerp",
    "Westerlo", "OH Leuven", "Union Saint-Gilloise", "Mechelen",
    "Eupen", "Kortrijk", "RWD Molenbeek", "St Truiden"
]


# -------------------- Section de S√©lection des √âquipes --------------------
st.markdown("### üèüÔ∏è S√©lection des √âquipes")

col1, col2, col3 = st.columns([2, 1, 2])

with col1:
    st.markdown('<div class="team-card">', unsafe_allow_html=True)
    st.markdown("#### üè† √âquipe Domicile")
    home_team = st.selectbox(
        "Choisissez l'√©quipe √† domicile",
        jupiler_teams,
        key="home",
        help="L'√©quipe qui joue √† domicile"
    )
    st.markdown('</div>', unsafe_allow_html=True)

with col2:
    st.markdown('<div class="vs-divider">VS</div>', unsafe_allow_html=True)

with col3:
    st.markdown('<div class="team-card">', unsafe_allow_html=True)
    st.markdown("#### üõ´ √âquipe Ext√©rieur")
    away_options = [team for team in jupiler_teams if team != home_team]
    away_team = st.selectbox(
        "Choisissez l'√©quipe √† l'ext√©rieur",
        away_options,
        key="away",
        help="L'√©quipe qui joue √† l'ext√©rieur"
    )
    st.markdown('</div>', unsafe_allow_html=True)


# --- Season selection for stats ---

# -------------------- Model Loading Section --------------------
@st.cache_resource(show_spinner=False)
def load_trained_model():
    """Charge le mod√®le pr√©-entra√Æn√© depuis le backend"""
    
    try:
        # Charger le mod√®le depuis le fichier joblib
        model = load_model("trained_model.joblib")
        st.success("‚úÖ Mod√®le pr√©-entra√Æn√© charg√© avec succ√®s!")
        
        # Charger les donn√©es pour obtenir les encodeurs
        df = pd.read_csv(DATA_PATH)
        
        # Cr√©er un ModelTrainer pour avoir acc√®s aux m√©thodes de pr√©diction
        trainer = ModelTrainer(df, "FTR")
        trainer.split_data()
        trainer.model = model  # Utiliser le mod√®le pr√©-entra√Æn√©
        
        return trainer
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        st.info("üîÑ Tentative de chargement d'un mod√®le de base...")
        
        # Fallback : cr√©er un mod√®le simple si le mod√®le pr√©-entra√Æn√© n'est pas disponible
        df = pd.read_csv(DATA_PATH)
        trainer = ModelTrainer(df, "FTR")
        trainer.split_data()
        
        # Cr√©er et entra√Æner un mod√®le simple
        from sklearn.ensemble import RandomForestClassifier
        trainer.build_pipeline(RandomForestClassifier(random_state=42, n_estimators=50))
        trainer.model = trainer.pipeline
        trainer.model.fit(trainer.X_train, trainer.y_train)
        
        st.warning("‚ö†Ô∏è Mod√®le de base cr√©√© (performance limit√©e)")
        return trainer

# Charger le mod√®le
model_trainer = load_trained_model()


def predict_match_outcome_with_score(home, away):
    """Pr√©dit l'issue d'un match avec le mod√®le backend r√©el"""
    try:
        # Utiliser une pr√©diction bas√©e sur les statistiques historiques du dataset
        # car le mod√®le complet n√©cessite plus de features que nous avons dans l'interface
        
        # Analyser l'historique des confrontations directes
        confrontations = df_full[
            ((df_full['HomeTeam'] == home) & (df_full['AwayTeam'] == away)) |
            ((df_full['HomeTeam'] == away) & (df_full['AwayTeam'] == home))
        ]
        
        # Statistiques de l'√©quipe √† domicile
        home_matches = df_full[df_full['HomeTeam'] == home]
        home_wins = len(home_matches[home_matches['FTR'] == 'H'])
        home_total = len(home_matches)
        home_win_rate = home_wins / home_total if home_total > 0 else 0
        
        # Statistiques de l'√©quipe √† l'ext√©rieur
        away_matches = df_full[df_full['AwayTeam'] == away]
        away_wins = len(away_matches[away_matches['FTR'] == 'A'])
        away_total = len(away_matches)
        away_win_rate = away_wins / away_total if away_total > 0 else 0
        
        # Calcul des moyennes de buts
        home_goals_avg = home_matches['FTHG'].mean() if len(home_matches) > 0 else 1.5
        away_goals_avg = away_matches['FTAG'].mean() if len(away_matches) > 0 else 1.5
        
        # Algorithme de pr√©diction bas√© sur les statistiques
        home_score = (home_win_rate * 0.4) + (home_goals_avg / 3.0 * 0.3) + 0.1  # Avantage domicile
        away_score = (away_win_rate * 0.4) + (away_goals_avg / 3.0 * 0.3)
        
        # Ajustement bas√© sur les confrontations directes
        if len(confrontations) > 0:
            recent_confrontations = confrontations.tail(3)  # 3 derniers matchs
            home_wins_h2h = len(recent_confrontations[
                ((recent_confrontations['HomeTeam'] == home) & (recent_confrontations['FTR'] == 'H')) |
                ((recent_confrontations['AwayTeam'] == home) & (recent_confrontations['FTR'] == 'A'))
            ])
            h2h_bonus = (home_wins_h2h / len(recent_confrontations)) * 0.2
            home_score += h2h_bonus
            away_score += (0.2 - h2h_bonus)
        
        # D√©terminer le r√©sultat
        diff = abs(home_score - away_score)
        confidence = min(50 + (diff * 100), 85)  # Entre 50% et 85%
        
        if home_score > away_score + 0.05:  # Seuil pour √©viter les pr√©dictions trop serr√©es
            prediction = 'H'
            outcome = f'üè† VICTOIRE {home.upper()}'
            emoji = 'üî•'
            description = f"L'√©quipe √† domicile {home} devrait remporter ce match !"
        elif away_score > home_score + 0.05:
            prediction = 'A'
            outcome = f'üõ´ VICTOIRE {away.upper()}'  
            emoji = '‚ö°'
            description = f"L'√©quipe visiteur {away} est favorite pour ce d√©placement !"
        else:
            prediction = 'D'
            outcome = 'ü§ù MATCH NUL'
            emoji = '‚öñÔ∏è'
            description = "Un match √©quilibr√© qui pourrait se terminer par un partage des points"
            
        # Affichage expressif des r√©sultats de pr√©diction
        st.markdown("---")
        st.markdown("### üéØ **R√âSULTAT DE LA PR√âDICTION**")
        
        # Conteneur principal avec style
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 25px;
            border-radius: 20px;
            text-align: center;
            color: white;
            margin: 20px 0;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
        ">
            <h2 style="margin: 0; font-size: 2rem;">{emoji} {outcome}</h2>
            <p style="margin: 15px 0; font-size: 1.2rem; opacity: 0.9;">{description}</p>
            <div style="margin-top: 20px;">
                <span style="font-size: 1.1rem; font-weight: bold;">Niveau de Confiance: {confidence:.1f}%</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # D√©tails techniques avec style
        with st.expander("üîç **D√©tails Techniques de la Pr√©diction**", expanded=False):
            col1, col2 = st.columns(2)
            with col1:
                st.metric("üè† √âquipe Domicile", home)
                st.metric("üìä Taux victoire domicile", f"{home_win_rate:.1%}")
                st.metric("‚öΩ Buts/match domicile", f"{home_goals_avg:.1f}")
            with col2:
                st.metric("üõ´ √âquipe Ext√©rieur", away)
                st.metric("üìä Taux victoire ext√©rieur", f"{away_win_rate:.1%}")
                st.metric("‚öΩ Buts/match ext√©rieur", f"{away_goals_avg:.1f}")
                
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üéØ Pr√©diction", prediction)
            with col2:
                st.metric("ü§ù Confrontations directes", len(confrontations))
            with col3:
                st.metric("üìà Score technique domicile", f"{home_score:.3f}")
                st.metric("üìâ Score technique ext√©rieur", f"{away_score:.3f}")
                
            st.info("‚ÑπÔ∏è Pr√©diction bas√©e sur l'analyse statistique avanc√©e des performances historiques")
        
        return outcome, confidence
        
    except Exception as e:
        st.error(f"‚ùå **Erreur de pr√©diction:** {e}")
        import traceback
        st.code(traceback.format_exc())
        return 'ü§ù MATCH NUL (par d√©faut)', 50.0

def show_prediction_results(prediction, confidence):
    st.markdown("---")
    st.markdown("### üéØ R√©sultats de la Pr√©diction")
    
    # Conteneur principal pour la pr√©diction
    st.markdown('<div class="prediction-container">', unsafe_allow_html=True)
    
    # Affichage du r√©sultat principal
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        # D√©termination de la couleur et ic√¥ne selon la pr√©diction
        if prediction == "Home Win":
            result_emoji = "üè†"
            result_text = "VICTOIRE DOMICILE"
            result_color = "#00D4AA"
            interpretation = "L'√©quipe √† domicile est favorite pour remporter ce match"
        elif prediction == "Away Win":
            result_emoji = "üõ´"
            result_text = "VICTOIRE EXT√âRIEUR"
            result_color = "#FF6B6B"
            interpretation = "L'√©quipe √† l'ext√©rieur est favorite pour remporter ce match"
        else:
            result_emoji = "ü§ù"
            result_text = "MATCH NUL"
            result_color = "#FFD93D"
            interpretation = "Les deux √©quipes ont des chances √©gales, match nul probable"
        
        # Affichage styl√© du r√©sultat
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, {result_color}20, {result_color}10);
            border: 2px solid {result_color};
            border-radius: 15px;
            padding: 30px;
            text-align: center;
            margin: 20px 0;
            box-shadow: 0 8px 25px rgba(0,0,0,0.3);
        ">
            <div style="font-size: 4rem; margin-bottom: 10px;">{result_emoji}</div>
            <div style="
                font-size: 1.8rem;
                font-weight: bold;
                color: {result_color};
                margin-bottom: 15px;
                text-shadow: 0 2px 4px rgba(0,0,0,0.3);
            ">{result_text}</div>
            <div style="
                font-size: 1.1rem;
                color: #FAFAFA;
                font-style: italic;
                margin-bottom: 20px;
            ">{interpretation}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Barre de confiance
    st.markdown("#### üìà Niveau de Confiance")
    
    # D√©termination de la couleur de la barre de confiance
    if confidence >= 80:
        conf_color = "#00D4AA"
        conf_text = "TR√àS √âLEV√âE"
        conf_icon = "üî•"
    elif confidence >= 60:
        conf_color = "#FFD93D"
        conf_text = "√âLEV√âE"
        conf_icon = "üëç"
    elif confidence >= 40:
        conf_color = "#FF8C42"
        conf_text = "MOD√âR√âE"
        conf_icon = "‚ö†Ô∏è"
    else:
        conf_color = "#FF6B6B"
        conf_text = "FAIBLE"
        conf_icon = "‚ö°"
    
    # Barre de progression styl√©e
    progress_col1, progress_col2 = st.columns([3, 1])
    
    with progress_col1:
        st.markdown(f"""
        <div style="
            background: #262730;
            border-radius: 25px;
            padding: 5px;
            box-shadow: inset 0 3px 6px rgba(0,0,0,0.4);
        ">
            <div style="
                width: {confidence}%;
                height: 25px;
                background: linear-gradient(90deg, {conf_color}, {conf_color}80);
                border-radius: 20px;
                transition: width 0.3s ease;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-weight: bold;
                font-size: 0.9rem;
                text-shadow: 0 1px 2px rgba(0,0,0,0.5);
            ">{confidence:.1f}%</div>
        </div>
        """, unsafe_allow_html=True)
    
    with progress_col2:
        st.markdown(f"""
        <div style="
            display: flex;
            align-items: center;
            justify-content: center;
            height: 35px;
            font-size: 1.1rem;
            font-weight: bold;
            color: {conf_color};
        ">
            {conf_icon} {conf_text}
        </div>
        """, unsafe_allow_html=True)
    
    # Explication du mod√®le
    st.markdown("#### üß† √Ä propos de cette Pr√©diction")
    
    with st.expander("üîç D√©tails du Mod√®le de Pr√©diction", expanded=False):
        st.markdown("""
        **Notre mod√®le d'IA analyse plusieurs facteurs cl√©s :**
        
        üèÜ **Performances Historiques**
        - Statistiques des matchs pr√©c√©dents
        - Tendances de forme r√©cente
        - Historique des confrontations directes
        
        üìä **Indicateurs Statistiques**
        - Buts marqu√©s et encaiss√©s
        - Pourcentage de victoires
        - Performance √† domicile vs ext√©rieur
        
        ‚öΩ **Contexte du Match**
        - Avantage du terrain
        - Motivation et enjeux
        - Conditions de jeu
        
        **Note importante :** Cette pr√©diction est bas√©e sur des donn√©es historiques et statistiques. 
        Le football reste impr√©visible et de nombreux facteurs peuvent influencer le r√©sultat final.
        """)
    
    # Warning sur les limites de la pr√©diction
    st.warning("‚ö†Ô∏è **Disclaimer :** Cette pr√©diction est fournie √† titre informatif uniquement. "
               "Elle ne constitue pas un conseil de pari et ne garantit pas le r√©sultat du match.")
    
    st.markdown('</div>', unsafe_allow_html=True)

# --- Real stats extraction from dataset ---

def get_real_stats(team, df):
    # Filtrage strict par saison d√©j√† appliqu√© dans df
    home = df[df['HomeTeam'] == team]
    away = df[df['AwayTeam'] == team]
    # Debug: afficher le nombre de matchs jou√©s et gagn√©s pour la saison s√©lectionn√©e
    print(f"DEBUG {team} | Saison: matches_played={len(home) + len(away)}, wins={(home['FTR'] == 'H').sum() + (away['FTR'] == 'A').sum()}")
    matches_played = len(home) + len(away)
    goals_scored = home['FTHG'].sum() + away['FTAG'].sum()
    goals_conceded = home['FTAG'].sum() + away['FTHG'].sum()
    wins = (home['FTR'] == 'H').sum() + (away['FTR'] == 'A').sum()
    draws = (home['FTR'] == 'D').sum() + (away['FTR'] == 'D').sum()
    losses = matches_played - wins - draws
    # Classement calcul√© sur la saison filtr√©e
    teams = list(set(df['HomeTeam'].unique().tolist() + df['AwayTeam'].unique().tolist()))
    team_wins = {t: (df[df['HomeTeam'] == t]['FTR'] == 'H').sum() + (df[df['AwayTeam'] == t]['FTR'] == 'A').sum() for t in teams}
    sorted_teams = sorted(team_wins.items(), key=lambda x: x[1], reverse=True)
    position = [i+1 for i, (t, _) in enumerate(sorted_teams) if t == team][0] if team in dict(sorted_teams) else None
    # --- Donn√©es enrichies ---
    # Prendre la premi√®re ligne home ou away pour les infos d'√©quipe
    team_row = pd.concat([home, away]).iloc[0] if (len(home) > 0 or len(away) > 0) else None
    if team_row is not None:
        logo = team_row['home_logoURL'] if 'home_logoURL' in team_row else None
        color = team_row['home_color'] if 'home_color' in team_row else None
        alt_color = team_row['home_altColor'] if 'home_altColor' in team_row else None
        venue = team_row['homeVenue_fullName'] if 'homeVenue_fullName' in team_row else None
        venue_city = team_row['homeVenue_city'] if 'homeVenue_city' in team_row else None
        venue_capacity = team_row['homeVenue_capacity'] if 'homeVenue_capacity' in team_row else None
        # Stats avanc√©es club (scoring)
        club_goals = team_row.get('club_goals_24_25', None)
        club_assists = team_row.get('club_assists_24_25', None)
        club_games = team_row.get('club_games_24_25', None)
        club_minutes = team_row.get('club_minutes_24_25', None)
    else:
        logo = None
        color = None
        alt_color = None
        venue = None
        venue_city = None
        venue_capacity = None
        club_goals = None
        club_assists = None
        club_games = None
        club_minutes = None
    return {
        "Position": position,
        "Goals Scored": int(goals_scored),
        "Goals Conceded": int(goals_conceded),
        "Wins": int(wins),
        "Draws": int(draws),
        "Losses": int(losses),
        "Matches Played": int(matches_played),
        "Logo": logo,
        "Color": color,
        "Alt Color": alt_color,
        "Venue": venue,
        "Venue City": venue_city,
        "Venue Capacity": venue_capacity,
        "Club Goals 24/25": club_goals,
        "Club Assists 24/25": club_assists,
        "Club Games 24/25": club_games,
        "Club Minutes 24/25": club_minutes
    }




def show_stats_and_heatmap(home_team, away_team, season_year):
    st.markdown("---")
    st.markdown("### üìä Statistiques D√©taill√©es des √âquipes")
    
    # Sidebar pour la s√©lection de saison
    with st.sidebar:
        st.markdown("### ‚öôÔ∏è Param√®tres d'Analyse")
        season_idx = st.selectbox(
            "üìÖ S√©lectionnez la saison",
            list(range(len(season_labels))),
            format_func=lambda i: season_labels[i],
            key="season",
            help="Choisissez la saison pour analyser les statistiques"
        )
        
        show_advanced_stats = st.checkbox("üìà Statistiques avanc√©es", value=True)
        chart_type = st.radio(
            "üìä Type de visualisation",
            ["Bar Chart", "Radar Chart", "Les deux"],
            index=2
        )
    
    # Filtrage des donn√©es par saison
    if season_idx == 0:
        df_season = df_full.copy()
        season_text = "Toutes saisons"
    else:
        season_year = raw_years[season_idx - 1]
        df_season = df_full[df_full['Year'] == season_year]
        season_text = f"Saison {int(season_year)}-{int(season_year)+1}"
    
    st.info(f"üóìÔ∏è **P√©riode analys√©e :** {season_text}")
    st.markdown("‚ö†Ô∏è **Note :** La saison s√©lectionn√©e n'impacte que les statistiques affich√©es, pas la pr√©diction du match.")
    
    # R√©cup√©ration des statistiques
    stats_home = get_real_stats(home_team, df_season)
    stats_away = get_real_stats(away_team, df_season)
    
    # Affichage des cartes d'√©quipes
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<div class="stats-container">', unsafe_allow_html=True)
        st.markdown(f"### üè† {home_team}")
        
        # Logo de l'√©quipe
        logo_home = stats_home["Logo"]
        if logo_home and isinstance(logo_home, str) and logo_home.strip() and str(logo_home).lower() != 'nan':
            st.image(logo_home, width=100)
        
        # Informations du stade
        def format_stadium(venue, city, capacity):
            def clean(val):
                return "-" if val is None or (isinstance(val, float) and np.isnan(val)) or str(val).lower() == "nan" else str(val)
            return f"{clean(venue)} ({clean(city)}, {clean(capacity)})"
        
        st.markdown(f"**üèüÔ∏è Stade :** {format_stadium(stats_home['Venue'], stats_home['Venue City'], stats_home['Venue Capacity'])}")
        
        # M√©triques principales
        metrics_col1, metrics_col2, metrics_col3 = st.columns(3)
        with metrics_col1:
            st.metric("üèÜ Position", stats_home["Position"])
            st.metric("‚öΩ Buts marqu√©s", stats_home["Goals Scored"])
        with metrics_col2:
            st.metric("üéØ Victoires", stats_home["Wins"])
            st.metric("ü§ù Nuls", stats_home["Draws"])
        with metrics_col3:
            st.metric("‚ùå D√©faites", stats_home["Losses"])
            st.metric("üìä Matchs jou√©s", stats_home["Matches Played"])
        
        # Stats avanc√©es si activ√©es
        if show_advanced_stats:
            st.markdown("#### üìà Statistiques Avanc√©es Club 24/25")
            for stat_key, stat_label in [
                ('Club Goals 24/25', '‚öΩ Buts Club'),
                ('Club Assists 24/25', 'üéØ Passes d√©cisives'),
                ('Club Games 24/25', 'üèÉ Matchs jou√©s'),
                ('Club Minutes 24/25', '‚è±Ô∏è Minutes jou√©es')
            ]:
                val = stats_home.get(stat_key, None)
                if val is not None and str(val).lower() != 'nan':
                    st.write(f"**{stat_label} :** {val}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="stats-container">', unsafe_allow_html=True)
        st.markdown(f"### üõ´ {away_team}")
        
        # Logo de l'√©quipe
        logo_away = stats_away["Logo"]
        if logo_away and isinstance(logo_away, str) and logo_away.strip() and str(logo_away).lower() != 'nan':
            st.image(logo_away, width=100)
        
        st.markdown(f"**üèüÔ∏è Stade :** {format_stadium(stats_away['Venue'], stats_away['Venue City'], stats_away['Venue Capacity'])}")
        
        # M√©triques principales
        metrics_col1, metrics_col2, metrics_col3 = st.columns(3)
        with metrics_col1:
            st.metric("üèÜ Position", stats_away["Position"])
            st.metric("‚öΩ Buts marqu√©s", stats_away["Goals Scored"])
        with metrics_col2:
            st.metric("üéØ Victoires", stats_away["Wins"])
            st.metric("ü§ù Nuls", stats_away["Draws"])
        with metrics_col3:
            st.metric("‚ùå D√©faites", stats_away["Losses"])
            st.metric("üìä Matchs jou√©s", stats_away["Matches Played"])
        
        # Stats avanc√©es si activ√©es
        if show_advanced_stats:
            st.markdown("#### üìà Statistiques Avanc√©es Club 24/25")
            for stat_key, stat_label in [
                ('Club Goals 24/25', '‚öΩ Buts Club'),
                ('Club Assists 24/25', 'üéØ Passes d√©cisives'),
                ('Club Games 24/25', 'üèÉ Matchs jou√©s'),
                ('Club Minutes 24/25', '‚è±Ô∏è Minutes jou√©es')
            ]:
                val = stats_away.get(stat_key, None)
                if val is not None and str(val).lower() != 'nan':
                    st.write(f"**{stat_label} :** {val}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Section de comparaison visuelle
    st.markdown("---")
    st.markdown("### üìä Comparaison Visuelle")
    
    stats_labels = ["Position", "Goals Scored", "Goals Conceded", "Wins", "Draws", "Losses", "Matches Played"]
    
    def safe_int(val):
        try:
            if val is None or (isinstance(val, float) and np.isnan(val)):
                return 0
            return int(val)
        except Exception:
            return 0
    
    home_stats = [safe_int(stats_home[label]) for label in stats_labels]
    away_stats = [safe_int(stats_away[label]) for label in stats_labels]
    
    # Graphiques selon la s√©lection
    if chart_type in ["Bar Chart", "Les deux"]:
        st.markdown("#### üìä Graphique en Barres")
        fig_bar, ax_bar = plt.subplots(figsize=(12, 6))
        fig_bar.patch.set_facecolor('#0E1117')
        ax_bar.set_facecolor('#262730')
        
        x = np.arange(len(stats_labels))
        bars1 = ax_bar.bar(x - 0.25, home_stats, width=0.4, label=home_team, 
                          color='#FF6B6B', alpha=0.8, edgecolor='white', linewidth=1)
        bars2 = ax_bar.bar(x + 0.25, away_stats, width=0.4, label=away_team, 
                          color='#4ECDC4', alpha=0.8, edgecolor='white', linewidth=1)
        
        # Am√©lioration du style
        ax_bar.set_xticks(x)
        ax_bar.set_xticklabels(stats_labels, rotation=45, ha='right', color='white')
        ax_bar.set_ylabel('Valeurs', color='white')
        ax_bar.set_title('Comparaison des Statistiques Principales', 
                        color='white', fontsize=16, fontweight='bold')
        ax_bar.legend(frameon=False, labelcolor='white')
        ax_bar.tick_params(colors='white')
        ax_bar.grid(True, alpha=0.3)
        
        # Ajout des valeurs sur les barres
        for bar in bars1:
            height = bar.get_height()
            ax_bar.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                       f'{int(height)}', ha='center', va='bottom', color='white', fontweight='bold')
        
        for bar in bars2:
            height = bar.get_height()
            ax_bar.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                       f'{int(height)}', ha='center', va='bottom', color='white', fontweight='bold')
        
        st.pyplot(fig_bar)
    
    if chart_type in ["Radar Chart", "Les deux"]:
        st.markdown("#### üï∏Ô∏è Graphique Radar")
        from math import pi
        
        categories = stats_labels
        N = len(categories)
        values_home = home_stats + [home_stats[0]]
        values_away = away_stats + [away_stats[0]]
        angles = [n / float(N) * 2 * pi for n in range(N)]
        angles += angles[:1]
        
        fig_radar = plt.figure(figsize=(10, 10))
        fig_radar.patch.set_facecolor('#0E1117')
        ax_radar = plt.subplot(111, polar=True)
        ax_radar.set_facecolor('#262730')
        
        # Trac√© des lignes et remplissage
        ax_radar.plot(angles, values_home, linewidth=3, linestyle='solid', 
                     label=home_team, color='#FF6B6B')
        ax_radar.fill(angles, values_home, alpha=0.25, color='#FF6B6B')
        
        ax_radar.plot(angles, values_away, linewidth=3, linestyle='solid', 
                     label=away_team, color='#4ECDC4')
        ax_radar.fill(angles, values_away, alpha=0.25, color='#4ECDC4')
        
        # Am√©lioration du style
        ax_radar.set_xticks(angles[:-1])
        ax_radar.set_xticklabels(categories, color='white', fontsize=10)
        ax_radar.set_title('Profil Global des √âquipes', 
                          color='white', fontsize=16, fontweight='bold', pad=20)
        ax_radar.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1), 
                       frameon=False, labelcolor='white')
        ax_radar.grid(True, alpha=0.3)
        ax_radar.tick_params(colors='white')
        
        st.pyplot(fig_radar)

# -------------------- Main App Logic --------------------


# --- Gestion de l'√©tat pour afficher les stats ---
if "last_pred_home" not in st.session_state:
    st.session_state["last_pred_home"] = None
if "last_pred_away" not in st.session_state:
    st.session_state["last_pred_away"] = None
if "show_stats" not in st.session_state:
    st.session_state["show_stats"] = False

if st.button("üéØ Pr√©dire le Match", key="predict_btn", help="Cliquez pour obtenir la pr√©diction du match"):
    try:
        # Pr√©diction avec le mod√®le r√©el (inclut d√©j√† l'affichage expressif)
        outcome, confidence = predict_match_outcome_with_score(home_team, away_team)
        
        # Stocker les r√©sultats dans le state
        st.session_state['prediction'] = outcome
        st.session_state['confidence'] = confidence
        
        # M√©moriser les √©quipes pour les stats
        st.session_state["last_pred_home"] = home_team
        st.session_state["last_pred_away"] = away_team
        st.session_state["show_stats"] = True
        
    except Exception as e:
        st.error(f"‚ùå **Erreur critique lors de la pr√©diction:** {e}")
        import traceback
        with st.expander("üîß **D√©tails de l'erreur (pour debug)**"):
            st.code(traceback.format_exc())

# Afficher les stats et heatmap si une pr√©diction a √©t√© faite
if st.session_state["show_stats"] and st.session_state["last_pred_home"] and st.session_state["last_pred_away"]:
    show_stats_and_heatmap(st.session_state["last_pred_home"], st.session_state["last_pred_away"], raw_years[0])

# -------------------- Footer --------------------
AppStyle.add_footer(author="Herv√©, Konstantin et Santo a.k.a The Dream Team", year="2025")
